#Aulas Guanabara

Guido van Hossuem: Contribuidor da linguagem ABC na década de 80
Holanda / Guido Van Hossum

Problemas na criação da linguagem do projeto ABC fez com que criasce uma linguagem para resolver o problemas de incompatibilidade da linguagem

O fato do python ter uma cobra como mascote vem da editora de livros onralhy onde cada livro eles colocavam um animal na capa pra representar a linguagem, (Mesmo que o nome python tenha sido derivado de uma serial / montanha) a editora resolvel colocar a imagem de uma cobra para representalo

Serpente Python(O criador aceito o mascote pela massiva aceitação do publico a imagem)

primeira versões lançados na década de 90.

Em 2001 foi criada a funcação "Python Software Fundation"(Organização sem fins lucrativos com objetivo de manter o software disponivel, online, cordenada, além que a probpria comunidade contribui para a linguagem na sua estrutrura, adicionando o que achar util no momento);

Algumas das empresas apoiadoras(Microsoft, Globo.com, Google e entre outras);

Se tornou popular a ponto de já vim pre instalada em varios sistemas(EX: Todas as distros linux, algumas distros BSD e Mac OS)

-Caracteristicas:

Linguagem de Proposito geral(Não tem area expecifica de aplicação, ele é um pouco de tudo);
Linguagem Multiplataforma(Mesmo code utilizada em varios OS sem modificações)
Batteries included (já possui varios menores intalados juntos para evitar instalações futuras)
Linguagem Bem-Identada
Linguagem Horientada a Objetos
Muitas Bibliotecas para uso geral

Areas principais
Inteligencia artificial
Software 3D
BioTecnologia

Quem Usa:
ZOPE
Ear Canada
BitTorrent
Globo
Google
Youtube
Nasa
Autodesk
Blender
GImp
Rasperbery
Arduino

#A importancia de um interpretador(Tradutor)
Ele vai traduzir seu codigo em linguagem de maquina e vai responder devolta
Python => Binario = entrada
Saida Humana <= Binario = Saida

#Como mostras as mensagens de Tim Peterson no Python
Execute o comando: import this na interface e ele vai mostrar as mensagens de Tim peterson na tela(Zen Off Python);

>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

#Base teorica e primeiros comandos

Dados que são mensagens em python possuem delimitadores
EX: Delimitadores '' ou ""
print ('ola mundo') ou print ("ola mundo")
Ambos Funcionam

Todos os comandos em Python são funções

'' = sempre de preferencia a aspas simples

função para imprimir na tela: print('') ou print()
O print('') ou ("") imprimi strings entre as aspas e chaves
O print() imprimi valores que estam entre as chaves

#Como imprimir com um print
print(2+3) = Imprimi 5

#Imprimir valores separados
print ('2'+'3')
Vai imprimir 23, não da erro so sepera os valores sem fazer a soma do valor real

Pode usar a virgula ou o mais para juntar valores

#IMprimir valores separados
>>> print('2' + '2')
22

#IMprimir valores com espaço
>>> print('2','2')
2 2

#Valores com strings
>>> print("Print:",7 + 3)
Print: 10

#Toda a variavel é um objeto
#Variaveis = Atibuem valores de chamadas, uma variavel guarda um valor com referencia na memoria que pode ser modificado a qualquer momento

= Recebe
== Igual

Atribuindo valor a uma variavel
idade = 25

Atribuindo valor e chamando variaveis
>>> idade = 18
>>> nome = 'guilherme'
>>> altura = 1.95
>>> print(idade,nome,altura)
18 guilherme 1.95
#Nestes casos tem que usar virgula e não mais

#Entrada de valores, atribuindo valores a variaveis com entradas de usuarios

valor = input()
>>> valor = input("Nome: ")
Nome: guilherme
>>> print(valor)
guilherme

Até agora trabalhamos somente com o IDE executavel, mas nãpo criamos nenhum arquivo de programa python

Vamos criar um arquivo, se voce abrir no menu do DIE vai ter a opção para criar um arquivo, crie o exemplo:

nome = input("Nome: ")
idade = input("Sua Idade: ")

print("Meu nome é",nome,"e tenho",idade,"anos")

Depois de você salvar o arquivo ele terá a extensão .py

Para executar o script PY, você vai no arquivo, no menu dele tem a opção RUN , abre ele e tem o Run Module, com isso ele é executado na IDE

#Modo Interativo IDE =Testar
#Script = Criar um script em Python

# = Comentarios em Python

Saida Formatada
nome = input("Entrada: ")
print("SAida Formatada {}!".format(nome))

#Resultado
>>> nome = input("Entrada: ")
Entrada: 12
>>> print("SAida Formatada {}!".format(nome))
SAida Formatada 12!

IDE(Ambiente de desenvolvimento Integrado)
Ex: Pycharm Comunidade Edition

#Tipos e valores primitivos de entrada e saida
int = valores inteiros(2)
float = valores reais(2.1) ou valor de pi
bool = valores binarios(Verdadeiro ou false)("True ou False") = O python trabalha com a primeira letra em maiuscula o valores booleanos
str = strings em casos raros de entrada("teste") ou ('teste') ou ('2.2') ou ('')

#Valores de equação
+ = soma
- = menos
* = Multiplicação
/ = Divisão
** = potencia (5 ** 2 = 25) ou funcao de potencia pow(2,3)
// = divisão inteira = Divide até achar o resultado inteiro do valor(EX: 5 / 2 = 2.5, porém a divisão é inteira entam 5 / 2 = 2, porque 2 * 2 = 4, este é o valor inteiro mais proximo de 5 sem ser um valor real)
% = modulo(Resto de divisão) = O resultado de //, as vezes não são inteiros, e possuem restos, como o exemplo acima ele 4 - 5 = 1 este é o resto da divisão, isto é o módulo

Raiz quadrada na guambiara
EX: 81**(1/2) = potencia por meio
Raiz cubica na guambiara
EX: 81**(1/3) = potencia por três

Ordem de precedencia(Regras de matematica)
Ordem

O python só utiliza chaves para fazer operações, diferente da regra matematica

1° ()
2° **
3° * / // % = Quem estiver primeiro livre é efetuado
4° = + -

O python é muito reconhecido por não possuir limite para calculos como outros programas como java, o limite é literamente o tamanho da memoria interna da maquina

EX: >>> 312 ** 1290


Input no python, o padrão do python é string
Para ele aceitar um valor(Numeros) tem que fazer o input ser inteiro

valor = int(input('Agora o valor é inteiro: '))

#Chamadas de valores por parenteses
#Sintaxe nova(Python 3.0 pra frente)
print('Valor {}'.format(valor))

#Código de estudo e estrutura em python
#Entrada de valores inteiros e floats
valor1 = int(input("Valor1: "))
valor2 = int(input("Valor2: "))
valor3 = valor1 + valor2
print('Valor de saida formatador inteiro {}'.format(valor3))
#Saida customizada do guanabara desafio
#python 2 saida
print('A soma entre',valor1,'mais',valor2,'é igual há: {}'.format(valor3))
#Saida melhorada
#python 3 saida
print('A soma entre {} mais {} é igual há: {}'.format(valor1, valor2, valor3))
#Para identificar pode fazer isso(Não modifica a saida e nem atrapalha o resultado final)
#print('A soma entre {0} mais {1} é igual há: {2}'.format(valor1, valor2, valor3))
#Valores float
valor4 = float(input("Valor4: "))
valor5 = float(input("Valor5: "))
valor6 = valor5 + valor4
print('Valor de saida formatador float {}'.format(valor6))
#Como saber a saida do valor
print(type(valor6))
#Saida de strinf
entrada = str(input("Entrada: "))
print("Saida: {}".format(entrada))
#Saida boolean
#Saida boolem, se tem valor a saida e verdadeira, se não tem a saida é falsa
entrada1 = bool(input("Entrada Booleam: "))
print("Saida Booleam: {}".format(entrada1))

#Nele temos, saida de valores atual do python 3 e qual o tipo da saida, além do uso do tipo de input float

#Entradas e saida boolen
True = tem um valor de entrada
False = não tem valor de entrada

#Confirmando saida numericas em Python
#Metodo que converte o valor em string em inteiro(variavel.isnumeric) se o valor for verdadeiro(Não funciona com floats)

entrada = input("Entrada: ")
print(entrada.isnumeric())

#Confirma se o valor de entrada é uma string
entrada = input("Entrada: ")
print(entrada.isalpha())

#Entrada alpha-numerica
entrada = input("Entrada: ")
print(entrada.isalpha())

#trabalhando com métodos
entrada = input("Entrada: ")
print("Saida: {}".format(entrada))
#Tipo da entrada
print("Tipo: {}".format(type(entrada)))
#Entrada é Alpha-numero?
print("AlphaNumerico: {}".format(entrada.isalnum()))
#Entrada é alfabetica
print("Alpha: {}".format(entrada.isalpha()))
#Estrada é numerica
print("Numerico: {}".format(entrada.isnumeric()))
#Entrada é espaço vazio
print("Espaço: {}".format(entrada.isspace()))
#Entrada é minuscula
print("Minusculo: {}".format(entrada.islower()))
#Maiuscula
print("Maiusculo: {}".format(entrada.isupper()))
#Capitalizada(maiusculo e minusculo)
print("Capitalizada: {}".format(entrada.istitle()))

#Imprimir valores string mais de uma vez
'oi'*5
oioioioioi

Alinhamentos em python com caracteres
entrada = input("Entrada: ")
print("Valor: {:20}".format(entrada))

Valor: teste                = Imprimiu a entrada com 20 caracteres de tamanho

Alinhando a direita ou esquerda
entrada = input("Entrada: ")
print("Valor: {:20}".format(entrada))
print("Valor: {:>20}".format(entrada))
print("Valor: {:<20}".format(entrada))

Valor: 1                   = antes de 20 imprima
Valor:                    1 = depois de 20 imprima
Valor: 1                   = fique a esquerda de 20

print("Valor: {:^20}".format(entrada))
Valor centralizado em 20 espaços

>>> entrada = 1
>>> print("Valor: {:^20}".format(entrada))
Valor:          1

#Quando usamos variaveis
n1 = float(input("Entrada 1: "))
n2 = float(input("Entrada 2: "))
#Imprimir na linha
#Variaveos so são utilizadas quando a mais de uma chamada dela no codigo, um valor que se repetira mais de uma vez
print("Valor somatorio: {}".format(n1+n2))

#Arrumando a saida float
n1 = float(input("Entrada 1: "))
n2 = float(input("Entrada 2: "))
print("Valor: {:.2f}".format(n1/n2))

#Mas e se você der dois prints mas não quer quebrar a linha
#Faz isso que resolve

#Exemplos basicos
print("Teste",end='')
print("Testado")

#Exemplo dois
n1 = float(input("Entrada 1: "))
n2 = float(input("Entrada 2: "))
#Controle de casas reais a serem impressas
print("Valor: {:.2f}".format(n1/n2), end='')
print("Testado na sida de valor")

Porém o end pode ter um valor no meio para juntar as linhas
EX:
print("Valor: {:.2f}".format(n1/n2), end=' >>> ')
print("Testado na sida de valor")


#E agora e se você quer quebrar a linha
#É que nem no C use \n pra quebrar

print("Quebre 1\nQuebre 2\nQuebre3")

#Saida
>>> print("Quebre 1\nQuebre 2\nQuebre3")
Quebre 1
Quebre 2
Quebre3

#Desafio e colocando boas praticas de teste
entrada = int(input("Entre com um valor: "))
print("Valor antecessor: {}\nValor Original: {}\nValor sucessor: {}".format(entrada - 1, entrada, entrada + 1))

#Fazer raiz ao quadrado
entrada = float(input("Entre com um valor: "))
print("Valor Raiz: {}".format(pow(entrada,(1/2))))

#Você pode utilizar acentos nas variaveis do python

#No python ou quase em todas as linguagens o float é representado com ponto flutuante e não ,

#O simbolo de porcentagem funciona como resto de divisão e não como equação em python

EX:
preco = float(input("Valor atual: "))
#Meu jeito de fazer porcento no code(Mania de fazer rapido no C)
desc = preco - ((preco / 100) * 5)
print("Valor com desconto de 5%: {:.2f}".format(desc))

#Modulos

Importar Bibliotecas para adicionar funcionalidades extras que não vem por padrão na Linguagem

#COmo adicionar uma biblioteca no Python
Use o comandos:

#tudo
import (biblioteca = adiciona toda uma biblioteca e suas funcionalidades)

#Parte
#Importar so uma parte da Biblioteca
from (biblioteca) import (parte que você quer da biblioteca)

#Importando a biblioteca
import math = importa a biblioteca de matematica

Exemplos da biblioteca math
ceil = aredonda pra cima
floor = aaredonda pra baixo
trunc = trunca o valor
pow = potencia
sqrt = raiz quadrada
factorial = fatorial
Entre outras...

so importar uma parte
from math import sqrt = so vai ter raiz quadrada

Depois que você importar uma biblioteca, e voc~e nao lembra os comandos de ctrl + espac = para abrir o menu de opções de comandos,onde você digita ou escolhe o comando que quer

Com biblioteca inteira você usa
math.ceil(variavel) = voce referencia o comando pela biblioteca que usa

Porém se você só importar o comando de uma biblioteca você não precisa referenciar o comando, somente utiliza-lo
EX:
sqrt(variavel) = voce não precisa referenciar a biblioteca

#biblioteca random
import random
valor = random.randint(0, 5)
print(valor)

#Instalando uma biblioteca no pycharm

so colocar a biblioteca e se não possuir instalada, aparece uma lampada pra instala-la, você instala e pronto a biblioteca funciona normalmente

mas como instalar mais bibliotecas no pycharm
File -> Settings -> Project Pratico -> Project Interpreter ->
Ele mostra os modulo já instalados
#Clique no mais verde para instalar modulo e procure o desejado

#Importando so algumas bibliotecas
from <biblioteca> import <função>, <função>, (funçaõ>

#Ex:
from math import sqrt, radians, sin, con, tan

#Manipulando cadeia de caracteres
#O Python utiliza ', "

#variavel string
frase = 'frase dois tres e quatro'

O python cria e numera o tamanho de uma string sozinho, ele comeca a contar os caracteres a partir de zero, 
EX:

Numeração de caracter em mini-space de memoria(A frase ocupa o espaço na memoria)
frase
01234

#Processo de fatiamente de string
[] = estrutura de lista

Façamos um exemplo prático
print(frase) = ele imprimi toda a variavel frase
print(frase[9]) = ele imprimi so o valor que o caracter na nona posição possui

EX:
frase = 'pastel de frango maligno'
#Imprimi tudo
print(frase)
#imprimi so o valor do caracter 5 da variavel
print(frase[5])
#Imprimi do valor 5 a 15 dos caracteres da variavel
#O valor que ele vai realmente capturar vai ser de 5:14, o caracter 15 fica de fora
print(frase[5:15])

#Strings são imutaveis

# Possui 25 caraceters
frase = 'pastel de frango maligno'
# Imprimi tudo
print(frase)

#Fatiar

# imprimi so o valor do caracter 5 da variavel
print(frase[5])
# Imprimi do valor 5 a 15 dos caracteres da variavel
# O valor que ele vai realmente capturar vai ser de 5:14, o caracter 15 fica de fora
print(frase[5:15])
# Agora vamos testar a fatiação com o valor acima da maxima
print(frase[5:24])
# Transpondo a maxima
# Ele não da erro, simplismente imprimi o que estiver entre os valores
print(frase[5:30])
# Pulando casas, :2 ele ignora a casa entre dois
# Original = frase = 'pastel de frango maligno'
# EX: 'pse efag ain'
# A conta é assim: Valor final - 1 = casa a ser ignorada
print(frase[0:24:2])
print(frase[5:24:2])
# Fatiando, imprindo desde o inicio  e limitando a frase
print(frase[:5])
# Imprimindo a partir de um valor de caracteres
# Do caracter 20 até o final
print(frase[20:])
# Fatiando de modo inteligente com as tres casas
# A parteir do 5 até o fim pulando de duas em duas casas
print(frase[5::2])
# Tamanho das casas: Imprimi o numero de caracteres
print(len(frase))
# Contar quantas vezes um valor aparece dentro de uma string
# frase = <Variavel desejada>
# 'a' = <valor a ser procurado>
print(frase.count('a'))
# Contagem com fatiamento
# Conta os A's minusculos entre 0 a 12
print(frase.count('a', 0, 13))
# Procurar por posições especificas numa string
# Mostra o caracter que inicia o find
print(frase.find('fra'))
# O erro de nada encontrado no find
# Se ele mostrar -1 = não existe o valor
print(frase.find('teste123'))

# Operador
# Confirmar se um valor existe
# Ele tem como resultado True ou False
print('pastel' in frase)
print('frase' in frase)

# Métodos
# Transformacao
# Troca valor
# Replace valor1 por valor2
print(frase.replace('pastel', 'Errado'))
# Deixando maiusculo o valor da variavel
print(frase.upper())
# Deixando o valor da variavel em minusculo
print(frase.lower())
# Transforma tudo em minusculoe  deixa só o primeiro caractere em maiusculo
print(frase.capitalize())
# O title e um capitalize por palavra, ele indentifica onde a uma quebra de linha e transforma o primeiro valor antes da quebra de linhe numa letra em maiusculo
print(frase.title())

# Removendo todos os espaços inuteis antes e depois do valor de uma string
valor = ' Aprender Python '
# Sem strip
print(valor)
# Com strip
print(valor.strip())

# Não reconheceu o comando
# Removendo o valor de um unico lado(right) = diretia
# Direita
# print(valor.rstript())
# Esquerda
# print(valor.lstrip())

#split = ele encontra espaços numa variavel e tranforma num lista
#Ele pega uma string e divide em uma lista
print(frase.split())
#Juntando um valor
print(frase.split('-'.join(frase)))
#Ou
print('-'.join(frase))


#Imprimindo um texto
#Imprimi da forma que foi digitado, pulando as linha da mesma forma
print("""
#split = ele encontra espaços numa variavel e tranforma num lista
#Ele pega uma string e divide em uma lista
print(frase.split())
#Juntando um valor
print(frase.split('-'.join(frase)))
#Ou
print('-'.join(frase))
""")

#Utilizando mais de um comando por vez no objeto
print(frase.upper().count('a'))
print(frase.upper().count('A'))

#Alterando uma string
teste = ('pastel de frango maligno')
teste = frase.replace('pastel', 'bolo')
print(teste)

#Procurando a partir da direita#rfind = le pela direita
print('Ultima letra A: {}'.format(entrada.rfind('A')))

#Estrutura de condições

#Estrutura sequencial(Somente um caminho reto, não sofre alterações durante o code, sem opções de modificação e não possui condições variadas)

#Programação estrutura
#Identação

#Montagem de blocos, a estrutura de se ou senão, faz com que tudo abaixo seja uma bloco de instrução

EX:
teste()
se teste.1()
	teste.2
	teste.3
senão
	teste.4
	teste.5
teste.fim

#Ex de Estrutura condicional

if teste:
	bloco True
else:
	bloco False
	
#estrutura condicional simples é so quando o code usa so o if
#estrutura condicional composta é quando o code utliza o else junto ao if

#Ao contrario de outras linguagens de programação o python usa a tabulação para fazer a estrutura de comando if e else
#Em outras linguagens o uso normal são as chaves {} para que a estrutura if e else funcione

#Modulo time
import time ou from time import sleep

sleep(3) = espera por 3 segundos

#estrutura Resumida
#O preco vai receber ou "isto ou aquilo"
preco = valor * 0.5 if valor <= 200 else valor * 0.45


Uso do ANSI
Escape sequence 

cores no Python

\033[  cor   m = representar cor
EX: Três codigos
style = style da letra
text = cor do texto
back = cor de fundo
\033[0;33;44m = style = 0, font-color = 33, cor de fundo = 44

Styles
0 = nada
1 = bold
4 = Underline
7 = negativo

Text
30 - branco
31 - vermelho
32 - green
33 - yellow
34 - blue
35 - purple
36 - white-blue
37 - gray

background
40 - branco
41 - vermelho
42 - green
43 - yellow
44 - blue
45 - purple
46 - white-blue
47 - gray

#Cores de exemplo
\033[0;30;41m
\033[7;33;46m
\033[1;35;43m
\033[30;42m
\033[m
\033[7:30m
#IMprimindo colorido
print('\033[31mOlá, Mundo')

#Cor de fundo
print('\033[1;31;42mOlá mundo')

#Limitando a area do back
#Se voce digitar denovo o code de cor e nao colocar nada ele quebra a sequencia e não deixa continuar limitando sua area
print('\033[1;31;42mOlá mundo\033[m')

#Alguns testes
print('\033[4;31;47mOlá mundo\033[m')
print('\033[7mOlá mundo\033[m')
print('\033[1;32mOlá mundo\033[m')
print('\033[7;30mOlá mundo\033[m')

#As cores começam a partir do code o que significa que pode começar em qualquer lugar do print
#EX:
print('Olá \033[1;31;42mmundo\033[m')

#Usando o format
valor = 'guilherme'
print('print meu nome {}{}{}'.format('\033[1;33m', valor, '\033[m'))
#Sem quebra de cor
print('print meu nome {}{}'.format('\033[1;33m', valor))
#O resultado é igual, porém tudo o que estiver a baixo tem a cor alterada tambem

#usando uma 'lista' = dicionario
#Recebe padrões
cores = {'limpa':'\033[m',
         'cor1':'\033[1;31;43m',
         'cor2':'\033[1;32;42m'}

print('{}print meu nome {}{}{}'.format(cores['limpa'], cores['cor1'], valor, cores['limpa']))

#Deletar valor de uma variavel ou variaveis

del <variavel> = limpa o valor que ela possui